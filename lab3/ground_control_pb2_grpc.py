# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ground_control_pb2 as ground__control__pb2


class GroundControlStub(object):
    """The ground control service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMap = channel.unary_unary(
                '/GroundControl/getMap',
                request_serializer=ground__control__pb2.mapRequest.SerializeToString,
                response_deserializer=ground__control__pb2.mapReply.FromString,
                )
        self.getCommands = channel.unary_unary(
                '/GroundControl/getCommands',
                request_serializer=ground__control__pb2.commandsRequest.SerializeToString,
                response_deserializer=ground__control__pb2.commandsReply.FromString,
                )
        self.getMineSerialNum = channel.unary_unary(
                '/GroundControl/getMineSerialNum',
                request_serializer=ground__control__pb2.serialNumRequest.SerializeToString,
                response_deserializer=ground__control__pb2.serialNumReply.FromString,
                )


class GroundControlServicer(object):
    """The ground control service definition.
    """

    def getMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMineSerialNum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroundControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMap': grpc.unary_unary_rpc_method_handler(
                    servicer.getMap,
                    request_deserializer=ground__control__pb2.mapRequest.FromString,
                    response_serializer=ground__control__pb2.mapReply.SerializeToString,
            ),
            'getCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommands,
                    request_deserializer=ground__control__pb2.commandsRequest.FromString,
                    response_serializer=ground__control__pb2.commandsReply.SerializeToString,
            ),
            'getMineSerialNum': grpc.unary_unary_rpc_method_handler(
                    servicer.getMineSerialNum,
                    request_deserializer=ground__control__pb2.serialNumRequest.FromString,
                    response_serializer=ground__control__pb2.serialNumReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GroundControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroundControl(object):
    """The ground control service definition.
    """

    @staticmethod
    def getMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GroundControl/getMap',
            ground__control__pb2.mapRequest.SerializeToString,
            ground__control__pb2.mapReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GroundControl/getCommands',
            ground__control__pb2.commandsRequest.SerializeToString,
            ground__control__pb2.commandsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMineSerialNum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GroundControl/getMineSerialNum',
            ground__control__pb2.serialNumRequest.SerializeToString,
            ground__control__pb2.serialNumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
